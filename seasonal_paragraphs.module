<?php

declare(strict_types=1);

use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;
use Drupal\block_content\Plugin\Block\BlockContentBlock;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\seasonal_paragraphs\Season;

/**
 * Implements hook_entity_base_field_info().
 */
function seasonal_paragraphs_entity_base_field_info(EntityTypeInterface $entity_type): array {
  if (!in_array($entity_type->id(), ['paragraph', 'block_content'])) {
    return [];
  }
  $fields = [];
  $fields[Season::FIELDNAME] = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Only visible in'))
    ->setTranslatable(FALSE)
    ->setRevisionable(TRUE)
    ->setSettings([
      'allowed_values' => [],
      'allowed_values_function' => 'seasonal_paragraphs_allowed_values'
    ])
    ->setRequired(FALSE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'region' => 'content',
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'string',
      'weight' => 0,
      'region' => 'hidden',
    ]);
  return $fields;
}


/**
 * Returns the allowed values for seasonal visibility.
 *
 * @see callback_allowed_values_function()
 */
function seasonal_paragraphs_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, bool &$cacheable = TRUE): array {
  /** @var $season Season */
  $season = \Drupal::service('seasonal_paragraphs.season');
  return $season->allowedValuesCallback($definition, $entity, $cacheable);
}

/**
 * Alter the label of "_none" value for seasonal visibility.
 */
function seasonal_paragraphs_options_list_alter(array &$options, array $context): void {
  if ($context['fieldDefinition']->getName() !== Season::FIELDNAME) {
    return;
  }
  if ($context['entity'] instanceof Paragraph || $context['entity'] instanceof BlockContent) {
    if (array_key_exists('_none', $options)) {
      $options['_none'] = t('visible all year round');
    }
  }
}

/**
 * Makes the season setting a oneline switch in the UI.
 */
function seasonal_paragraphs_field_widget_complete_form_alter(&$field_widget_complete_form, FormStateInterface $form_state, $context): void {
  if ($context['items']?->getName() == Season::FIELDNAME &&
    isset($field_widget_complete_form['widget']['#title'])
  ) {
    unset($field_widget_complete_form['widget']['#title']);
  }
}

/**
 * Implements hook_form_alter() for system_site_information_settings.
 */
function seasonal_paragraphs_form_system_site_information_settings_alter(&$form, $form_state, $form_id): void {
  $form['summer_season'] = [
    '#type' => 'details',
    '#title' => t('Summer season'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['summer_season']['inline_container'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['container-inline']
    ]
  ];
  $form['summer_season']['inline_container']['from'] = [
    '#type' => 'date',
    '#title' => t('Start date'),
    '#config_target' => 'seasonal_paragraphs.settings:summer_season.from',
    '#required' => TRUE,
  ];
  $form['summer_season']['inline_container']['to'] = [
    '#type' => 'date',
    '#title' => t('End date'),
    '#config_target' => 'seasonal_paragraphs.settings:summer_season.to',
    '#required' => TRUE,
  ];
  $form['summer_season']['help'] = [
    '#type' => 'inline_template',
    '#template' => '<div class="form-item__description">{{ helptext }}</div>',
    '#context' => [
      'helptext' => t('End date must be greater than start date. The year does not matter (the season is repeated every year), but start date and end date must be in the same year.')
    ]
  ];

  $form['#validate'][] = 'seasonal_paragraphs_site_settings_validate';
}

/**
 * Validates start and end date for a yearly recurring summer season.
 */
function seasonal_paragraphs_site_settings_validate(&$form, FormStateInterface $form_state ): void {
  $from = $form_state->getValue(['summer_season', 'inline_container', 'from']);
  $to = $form_state->getValue(['summer_season', 'inline_container', 'to']);
  if (empty($from)) {
    $form_state->setErrorByName(
      'summer_season][inline_container][from',
      t('Summer season start must not be empty.')
    );
  }
  if (empty($to)) {
    $form_state->setErrorByName(
      'summer_season][inline_container][to',
      t('Summer season end must not be empty.')
    );
  }
  if (!empty($form_state->getErrors())) {
    return;
  }

  $fromDate = \DateTime::createFromFormat('Y-m-d', $from);
  if (empty($fromDate) || $fromDate->format('Y-m-d') != $from) {
    $form_state->setErrorByName(
      'summer_season][inline_container][from',
      t('Summer season start must be a date in YYYY-MM-DD format.')
    );
  }
  $toDate = \DateTime::createFromFormat('Y-m-d', $to);
  if (empty($toDate) || $toDate->format('Y-m-d') != $to) {
    $form_state->setErrorByName(
      'summer_season][inline_container][to',
      t('Summer season end must be a date in YYYY-MM-DD format.')
    );
  }
  if (!empty($form_state->getErrors())) {
    return;
  }

  if ($fromDate >= $toDate) {
    $form_state->setErrorByName(
      'summer_season',
      t('Summer season end must be after summer season start.')
    );
  }
  if ($fromDate->format('Y') != $toDate->format('Y')) {
    $form_state->setErrorByName(
      'summer_season',
      t('Summer seasons must start and end in the same year.')
    );
  }
}

/**
 * Implements hook_cron().
 */
function seasonal_paragraphs_cron(): void {
  $lastPurge = \Drupal::state()->get('seasonal_paragraphs.last_purge', '0');
  $lastPurge = \DateTime::createFromFormat('U', $lastPurge);
  $today = new \DateTime();
  $today->setTime(0,0,0,0);

  $config = \Drupal::configFactory()->get('seasonal_paragraphs.settings');
  $from = \DateTime::createFromFormat('!Y-m-d', $config->get('summer_season.from'));
  $from->setDate((int) $today->format('Y'), (int) $from->format('m'), (int) $from->format('d'));
  $to = \DateTime::createFromFormat('!Y-m-d', $config->get('summer_season.to'));
  $to->setDate((int) $today->format('Y'), (int) $to->format('m'), (int) $to->format('d'));

  if (
    ($today >= $from && $lastPurge < $from) ||
    ($today > $to && $lastPurge < $to)
  ) {
    Cache::invalidateTags(Season::getExpiringCacheTags());
    \Drupal::state()->set('seasonal_paragraphs.last_purge', time());
  }
}


/**
 * Disables frontend rendering of off-season content.
 */
function seasonal_paragraphs_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode): void {
  if (!($entity instanceof Paragraph)) {
    return;
  }
  if ($entity->get(Season::FIELDNAME)->isEmpty()) {
    return;
  }
  /** @var $season Season */
  $season = \Drupal::service('seasonal_paragraphs.season');
  $build['#cache']['tags'] = Cache::mergeTags($build['#cache']['tags'], $season->getCacheTags());

  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  if ($entity->get(Season::FIELDNAME)->value != $season->getCurrentSeason() || !$entity->isPublished()) {
    $build['#access'] = FALSE;
  }
}

function seasonal_paragraphs_block_access(Block $block, $operation, AccountInterface $account): AccessResultInterface {
  if ($operation !== 'view' || !($block->getPlugin() instanceof BlockContentBlock)) {
    return AccessResult::neutral();
  }
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return AccessResult::neutral();
  }

  $entities = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
    'uuid' => $block->getPlugin()->getDerivativeId()
  ]);
  $entity = reset($entities);
  if (!($entity instanceof BlockContent) || ($entity->get(Season::FIELDNAME)?->isEmpty() ?? TRUE)) {
    return AccessResult::neutral();
  }

  $season = \Drupal::service('seasonal_paragraphs.season');
  if ($entity->get(Season::FIELDNAME)->value != $season->getCurrentSeason() || !$entity->isPublished()) {
    return AccessResult::forbidden()->addCacheTags($season->getCacheTags());
  }
  return AccessResult::neutral()->addCacheTags($season->getCacheTags());
}

/**
 * Soft sanity check, renders a UI warning when content is missing for one season.
 */
function seasonal_paragraphs_entity_presave(EntityInterface $entity): void {
  if (!($entity instanceof Paragraph)) {
    return;
  }
  $fieldsToCheck = \Drupal::config('seasonal_paragraphs.settings')->get('entity_field_sanity_check');
  if (empty($fieldsToCheck)) {
    return;
  }
  foreach ($fieldsToCheck as $check) {
    [$entityType, $fieldToCheck] = explode(':', $check);
    /** * @var Node $entity */
    if ($entity->getEntityTypeId() != $entityType) {
      continue;
    }
    if (!$entity->hasField($fieldToCheck)) {
      continue;
    }
    if ($entity->get($fieldToCheck)->isEmpty()) {
      continue;
    }
    $seasonalParagraphs = [];
    foreach ($entity->get($fieldToCheck) as $field) {
      $paragraph = $field->entity;
      if ($paragraph->get(Season::FIELDNAME)->isEmpty()) {
        continue 2;
      }
      $seasonalParagraphs[$paragraph->get(Season::FIELDNAME)->value] = TRUE;
    }
    if (count($seasonalParagraphs) == 1) {
      \Drupal::messenger()->addWarning(
        t('@entity > @field: When using seasonal paragraphs, there should be at least one paragraph for every season.',
        ['@entity' => $entity->label() ?? $entity->getEntityType()->getLabel(), '@field'=> $entity->get($fieldToCheck)->getFieldDefinition()->getLabel()])
      );
    }
  }
}

/**
 * This function is invoked by global template_process() and therefore
 * available in all templates. Do not use for variables that might
 * change within a request (due caching).
 */
function seasonal_paragraphs_template_preprocess_default_variables_alter(array &$variables): void {
  $variables['season'] = \Drupal::service('seasonal_paragraphs.season')->getCurrentSeason();
}

/**
 * Adds a season CSS class to the root HTML tag.
 */
function seasonal_paragraphs_preprocess_html(array &$variables): void {
  $seasonService = \Drupal::service('seasonal_paragraphs.season');
  $class = "season-" . $seasonService->getCurrentSeason();
  if ($variables['html_attributes'] instanceof Attribute) {
    $variables['html_attributes']->addClass($class);
  }
  else {
    $variables['html_attributes']['class'][] = $class;
  }
  $variables['#cache']['tags'] = Cache::mergeTags($variables['#cache']['tags'] ?? [], $seasonService->getCacheTags());
}

/**
 * Adds a season CSS class to paragraph entities.
 */
function seasonal_paragraphs_preprocess_paragraph(array &$variables): void {
  $paragraph = $variables['paragraph'];
  if (!$paragraph->hasField(Season::FIELDNAME) || $paragraph->get(Season::FIELDNAME)->isEmpty()) {
    return;
  }
  $variables['attributes']['class'][] = "paragraph--season--{$paragraph->get(Season::FIELDNAME)->value}";
}

/**
 * Inject season context into twig_field field widgets.
 */
function seasonal_paragraphs_twig_field_widget_variable_alter(array &$options, $alter_context): void {
  $options['Global']['season'] = 'season';
}

/**
 * Inject season context into twig_field field templates.
 */
function seasonal_paragraphs_twig_field_formatter_variable_alter(array &$options, $alter_context): void {
  $options['season'] = \Drupal::service('seasonal_paragraphs.season')->getCurrentSeason();
}
